name: LaTeX Perfectionist

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.tex'
      - '**.bib'
      - '.latex-perfectionist.toml'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.tex'
      - '**.bib'
      - '.latex-perfectionist.toml'
      - 'pyproject.toml'

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install LaTeX Perfectionist
      run: |
        pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Run LaTeX Perfectionist checks
      run: |
        poetry run latex-perfectionist check \
          --output sarif \
          --output-file results.sarif \
          --fail-on warning \
          $(find . -name "*.tex" -not -path "./tests/*" -not -path "./.venv/*")
      continue-on-error: true
    
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      if: always()
    
    - name: Generate summary report
      if: always()
      run: |
        poetry run latex-perfectionist check \
          --output json \
          --output-file results.json \
          $(find . -name "*.tex" -not -path "./tests/*" -not -path "./.venv/*") || true
        
        echo "## LaTeX Perfectionist Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f results.json ]; then
          ERRORS=$(jq '.summary.errors // 0' results.json)
          WARNINGS=$(jq '.summary.warnings // 0' results.json)
          INFO=$(jq '.summary.info // 0' results.json)
          
          if [ "$ERRORS" -eq 0 ] && [ "$WARNINGS" -eq 0 ]; then
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "Found issues:" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ Warnings: $WARNINGS" >> $GITHUB_STEP_SUMMARY
            echo "- ℹ️ Info: $INFO" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## LaTeX Perfectionist Results\n\n';
          
          try {
            const sarif = JSON.parse(fs.readFileSync('results.sarif', 'utf8'));
            const run = sarif.runs[0];
            const results = run.results || [];
            
            if (results.length === 0) {
              comment += '✅ **No issues found!**';
            } else {
              const errors = results.filter(r => r.level === 'error').length;
              const warnings = results.filter(r => r.level === 'warning').length;
              const info = results.filter(r => r.level === 'note').length;
              
              comment += `Found ${results.length} issue(s):\n`;
              comment += `- ❌ Errors: ${errors}\n`;
              comment += `- ⚠️ Warnings: ${warnings}\n`;
              comment += `- ℹ️ Info: ${info}\n\n`;
              
              comment += '### Top Issues\n\n';
              results.slice(0, 5).forEach(result => {
                const level = result.level;
                const icon = level === 'error' ? '❌' : level === 'warning' ? '⚠️' : 'ℹ️';
                const message = result.message.text;
                const location = result.locations[0].physicalLocation;
                const file = location.artifactLocation.uri;
                const line = location.region.startLine;
                
                comment += `${icon} **${file}:${line}** - ${message}\n`;
              });
              
              if (results.length > 5) {
                comment += `\n... and ${results.length - 5} more issues.`;
              }
            }
          } catch (e) {
            comment += '❌ Failed to parse results';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install poetry
        poetry install
    
    - name: Generate SBOM
      run: |
        poetry run latex-perfectionist sbom \
          --format cyclonedx-json \
          --output sbom.json \
          main.tex || echo "{}" > sbom.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.json