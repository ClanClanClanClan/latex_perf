# ===============================================================================
# DOCKERFILE for LaTeX Perfectionist
# ===============================================================================

# Multi-stage build for optimal image size
FROM ubuntu:22.04 as texlive-base

# Avoid interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    perl \
    fontconfig \
    python3 \
    python3-pip \
    python3-venv \
    git \
    curl \
    gnupg \
    ca-certificates \
    poppler-utils \
    imagemagick \
    inkscape \
    pandoc \
    && rm -rf /var/lib/apt/lists/*

# Install TeX Live (full scheme for maximum compatibility)
RUN mkdir -p /tmp/texlive && cd /tmp/texlive && \
    wget -qO- https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz | tar -xz --strip-components=1 && \
    echo "selected_scheme scheme-full" > texlive.profile && \
    echo "TEXDIR /opt/texlive/2023" >> texlive.profile && \
    echo "TEXMFLOCAL /opt/texlive/texmf-local" >> texlive.profile && \
    echo "TEXMFSYSVAR /opt/texlive/2023/texmf-var" >> texlive.profile && \
    echo "TEXMFSYSCONFIG /opt/texlive/2023/texmf-config" >> texlive.profile && \
    echo "TEXMFVAR ~/.texlive2023/texmf-var" >> texlive.profile && \
    echo "TEXMFCONFIG ~/.texlive2023/texmf-config" >> texlive.profile && \
    echo "TEXMFHOME ~/texmf" >> texlive.profile && \
    echo "option_doc 0" >> texlive.profile && \
    echo "option_src 0" >> texlive.profile && \
    ./install-tl --profile=texlive.profile && \
    rm -rf /tmp/texlive

# Add TeX Live to PATH
ENV PATH="/opt/texlive/2023/bin/x86_64-linux:${PATH}"

# ===============================================================================
# APPLICATION STAGE
# ===============================================================================

FROM texlive-base as application

# Create application user
RUN useradd -m -u 1000 texuser && \
    mkdir -p /app && \
    chown texuser:texuser /app

# Set working directory
WORKDIR /app

# Copy Python requirements first (for better caching)
COPY requirements.txt .

# Install Python dependencies
RUN python3 -m pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Install LaTeX Perfectionist
RUN python3 -m pip install -e .

# Create directories for data and cache
RUN mkdir -p /app/data /app/cache /app/output && \
    chown -R texuser:texuser /app

# Switch to non-root user
USER texuser

# Set environment variables
ENV PYTHONPATH="/app:${PYTHONPATH}"
ENV LATEX_PERFECTIONIST_CACHE_DIR="/app/cache"
ENV LATEX_PERFECTIONIST_DATA_DIR="/app/data"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD latex-perfectionist --version || exit 1

# Default command
ENTRYPOINT ["latex-perfectionist"]
CMD ["--help"]

# ===============================================================================
# CI/CD RUNNER STAGE (for GitHub Actions)
# ===============================================================================

FROM application as ci-runner

# Install additional CI tools
USER root
RUN apt-get update && apt-get install -y \
    jq \
    xmlstarlet \
    git \
    ssh \
    && rm -rf /var/lib/apt/lists/*

# Install Python CI dependencies
RUN python3 -m pip install --no-cache-dir \
    pytest \
    pytest-cov \
    pytest-xdist \
    black \
    flake8 \
    mypy \
    bandit \
    safety

USER texuser

# CI-specific environment
ENV CI=true
ENV LATEX_PERFECTIONIST_CI=true