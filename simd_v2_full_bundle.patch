diff --git a/Makefile b/Makefile
index 2f5c2b1..6f0d3c9 100644
--- a/Makefile
+++ b/Makefile
@@ -1,7 +1,9 @@
 SHELL := /bin/bash
 FILE ?= /tmp/perf_smoke_big.tex
 J ?= 8
+AB_ITERS ?= 100000
+AB_WARMUP ?= 512
 
 .PHONY: all build clean verify service-run service-stop
 
@@ -29,12 +31,21 @@ service-stop:
 	-pkill -f main_service || true
 	@echo "[service] stopped"
 
-# Quick verification: build, time selftest, IPC propcheck, run service,
-# then 4×2500 concurrent requests against the service
+# Quick verification: build, time selftest, IPC propcheck,
+# SIMD guard self-check, A+B microbench (strict percentiles),
+# run service, hammer it with 4×2500
 verify: build service-run
 	_build/default/latex-parse/bench/time_selftest.exe
 	_build/default/latex-parse/bench/ipc_propcheck.exe
+	_build/default/latex-parse/bench/ab_microbench.exe "$(FILE)" $(AB_ITERS) $(AB_WARMUP)
 	@if [[ ! -f "$(FILE)" ]]; then echo "Set FILE=<path to perf_smoke_big.tex>"; exit 2; fi
 	_build/default/latex-parse/bench/run_service_bench_concurrent.exe "$(FILE)" 10000 4
 	@echo "[verify] tail CSV (slowest-100):"
 	@tail -n 10 /tmp/l0_service_tail.csv || true
 	@$(MAKE) service-stop
diff --git a/latex-parse/src/dune b/latex-parse/src/dune
index b3b0c45..4e7970a 100644
--- a/latex-parse/src/dune
+++ b/latex-parse/src/dune
@@ -1,15 +1,28 @@
 (library
  (name latex_parse_lib)
  (modules
-  config clock hedge_timer mlock meminfo gc_prep pretouch arena ipc
-  real_processor worker broker service_bracket)
+  config clock hedge_timer mlock meminfo gc_prep pretouch arena ipc
+  simd_guard real_processor worker broker service_bracket)
  (libraries unix threads)
  (foreign_stubs
   (language c)
-  (names clock_stubs hedge_timer_stubs mlock_stubs meminfo_stubs)))
+  (names clock_stubs hedge_timer_stubs mlock_stubs meminfo_stubs simd_guard_stubs))
+ ;; --- macOS force-load of static SIMD library to avoid dead-stripping ---
+ (c_library_flags
+  (-Wl,-force_load,/Users/dylanpossamai/Library/CloudStorage/Dropbox/Work/Articles/Scripts/core/l0_lexer/simd/libsimd_production.a)))
 
 (executable
  (name main_service)
  (modules main_service)
  (libraries latex_parse_lib unix threads))
diff --git a/latex-parse/bench/dune b/latex-parse/bench/dune
index 0ebfbcb..2a8ba2b 100644
--- a/latex-parse/bench/dune
+++ b/latex-parse/bench/dune
@@ -1,4 +1,9 @@
+(executable
+ (name ab_microbench)
+ (modules ab_microbench percentiles_strict)
+ (libraries unix latex_parse_lib))
+
 (executable
  (name run_service_bench_concurrent)
  (modules run_service_bench_concurrent percentiles_strict)
diff --git a/latex-parse/src/config.ml b/latex-parse/src/config.ml
index 0a9d0e7..7eb6c26 100644
--- a/latex-parse/src/config.ml
+++ b/latex-parse/src/config.ml
@@ -1,7 +1,13 @@
 let page_bytes                   = 4096
 
 (* Hedging *)
-let hedge_timer_ms_default       = 10
+let hedge_timer_ms_default       = 10    (* best result in your final 100k run *)
+let require_simd                 = true  (* refuse to start if SIMD missing unless L0_ALLOW_SCALAR=1 *)
 
 (* GC / rotation budgets (per worker, since last spawn) *)
 let minor_heap_bytes             = 256 * 1024 * 1024
 let gc_space_overhead            = 10_000
 let gc_max_overhead              = 10_000
 let gc_full_major_budget_mb      = 256
@@ -23,3 +29,8 @@ let max_req_bytes                = 2 * 1024 * 1024
 let tail_csv_path                = "/tmp/l0_service_tail.csv"
 let tail_trace_keep              = 100
 
 let pool_cores                   = [|0;1|]
+
+(* A+B microbench conservative invariants (simd_v2 spec) *)
+let ab_expected_tokens_min       = 900_000
+let ab_expected_tokens_max       = 1_050_000
+let ab_p999_target_ms            = 15.0
diff --git a/latex-parse/src/simd_guard_stubs.c b/latex-parse/src/simd_guard_stubs.c
new file mode 100644
index 0000000..f3f4f4e
--- /dev/null
+++ b/latex-parse/src/simd_guard_stubs.c
@@ -0,0 +1,87 @@
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <stdint.h>
+
+/* Weak reference to the SIMD entrypoint symbol provided by your static lib.
+   If the linker dead-strips it, this pointer stays NULL unless we force-load. */
+__attribute__((weak)) void tokenize_bytes_into_soa_simd(void);
+
+#if defined(__APPLE__) && (defined(__aarch64__) || defined(__arm64__))
+  #include <sys/sysctl.h>
+  static int cpu_has_simd(void){
+    int neon = 0; size_t sz = sizeof(neon);
+    if (sysctlbyname("hw.optional.neon", &neon, &sz, NULL, 0) != 0) return 0;
+    return neon ? 1 : 0;
+  }
+#elif defined(__aarch64__)
+  #include <sys/auxv.h>
+  #include <asm/hwcap.h>
+  static int cpu_has_simd(void){
+    unsigned long caps = getauxval(AT_HWCAP);
+    return (caps & HWCAP_ASIMD) ? 1 : 0;
+  }
+#elif defined(__x86_64__) || defined(__i386__)
+  #include <cpuid.h>
+  static int cpu_has_simd(void){
+    unsigned eax, ebx, ecx, edx;
+    if (!__get_cpuid(7, &eax, &ebx, &ecx, &edx)) return 0;
+    return (ebx & (1u<<5)) ? 1 : 0; /* AVX2 bit */
+  }
+#else
+  static int cpu_has_simd(void){ return 0; }
+#endif
+
+CAMLprim value ocaml_simd_cpu_supported(value unit){
+  return Val_bool(cpu_has_simd());
+}
+
+CAMLprim value ocaml_simd_symbol_linked(value unit){
+  return Val_bool(tokenize_bytes_into_soa_simd != 0);
+}
diff --git a/latex-parse/src/simd_guard.ml b/latex-parse/src/simd_guard.ml
new file mode 100644
index 0000000..5196cbc
--- /dev/null
+++ b/latex-parse/src/simd_guard.ml
@@ -0,0 +1,27 @@
+external cpu_supported : unit -> bool = "ocaml_simd_cpu_supported"
+external symbol_linked : unit -> bool = "ocaml_simd_symbol_linked"
+
+let env_allow_scalar () =
+  match Sys.getenv_opt "L0_ALLOW_SCALAR" with
+  | Some "1" | Some "true" | Some "TRUE" -> true
+  | _ -> false
+
+let require ?(allow_scalar_env=true) () =
+  let allow_scalar = allow_scalar_env && env_allow_scalar () in
+  let cpu_ok   = cpu_supported () in
+  let sym_ok   = symbol_linked () in
+  if Config.require_simd && not allow_scalar then begin
+    if not cpu_ok then failwith "SIMD_v2: CPU SIMD not supported (refusing to start)";
+    if not sym_ok then failwith "SIMD_v2: SIMD library not linked/force-loaded (refusing to start)";
+  end;
+  (cpu_ok, sym_ok, allow_scalar)
diff --git a/latex-parse/src/main_service.ml b/latex-parse/src/main_service.ml
index 687288a..a60f3b7 100644
--- a/latex-parse/src/main_service.ml
+++ b/latex-parse/src/main_service.ml
@@ -9,6 +9,15 @@ let sigchld_reaper _ =
   (try reap () with _ -> ())
 
 let run () =
+  (* --- SIMD guard: refuse to run scalar unless explicitly allowed --- *)
+  (try
+     let (cpu_ok, sym_ok, allow_scalar) = Simd_guard.require () in
+     if not (cpu_ok && sym_ok) && allow_scalar then
+       prerr_endline "[svc] WARNING: running in scalar fallback because L0_ALLOW_SCALAR=1"
+   with Failure msg ->
+     prerr_endline ("[svc] FATAL: "^msg); exit 2
+  );
+
   Sys.set_signal Sys.sigchld (Sys.Signal_handle sigchld_reaper);
   let sock_path = Config.service_sock_path in
   unlink_if_exists sock_path;
diff --git a/latex-parse/bench/ab_microbench.ml b/latex-parse/bench/ab_microbench.ml
new file mode 100644
index 0000000..a4a8a39
--- /dev/null
+++ b/latex-parse/bench/ab_microbench.ml
@@ -0,0 +1,123 @@
+open Unix
+open Percentiles_strict
+
+let read_file path =
+  let ic = open_in_bin path in let len = in_channel_length ic in
+  let s = really_input_string ic len in close_in ic; Bytes.unsafe_of_string s
+
+let idx_q n q = max 0 (min (n-1) (int_of_float (ceil (float n *. q)) - 1))
+
+let () =
+  if Array.length Sys.argv < 3 then (prerr_endline "usage: ab_microbench FILE ITERS [WARMUP]"; exit 2);
+  let file   = Sys.argv.(1) in
+  let total  = int_of_string Sys.argv.(2) in
+  let warmup = if Array.length Sys.argv > 3 then int_of_string Sys.argv.(3) else 512 in
+  let input  = read_file file in
+  let arenas = Arena.create ~cap:Config.arenas_tokens_cap in
+  Gc_prep.init_gc ();
+  let samples = Array.make total 0.0 in
+
+  (* SIMD guard (same rule as service) *)
+  (try
+     let (_cpu_ok, _sym_ok, _allow_scalar) = Simd_guard.require () in ()
+   with Failure msg ->
+     prerr_endline ("[ab] FATAL: "^msg); exit 2
+  );
+
+  (* Warmup *)
+  for _=1 to warmup do
+    Gc_prep.prepay (); Arena.swap arenas;
+    Pretouch.pre_touch_bytes input ~page:Config.page_bytes;
+    let cur = Arena.current arenas in
+    ignore (Real_processor.run input cur)
+  done;
+
+  (* Measured *)
+  for i=0 to total-1 do
+    let t0 = Clock.now () in
+    Gc_prep.prepay (); Arena.swap arenas;
+    Pretouch.pre_touch_bytes input ~page:Config.page_bytes;
+    let cur = Arena.current arenas in
+    let (_status, tok, _iss) = Real_processor.run input cur in
+    let dt_ms = Clock.ms_of_ns Int64.(sub (Clock.now ()) t0) in
+    samples.(i) <- dt_ms;
+    if (i land 4095) = 0 then
+      if tok < Config.ab_expected_tokens_min || tok > Config.ab_expected_tokens_max
+      then (Printf.eprintf "[ab] token count out of expected range: %d\n%!" tok; exit 3)
+  done;
+
+  (* Percentiles *)
+  let n = Array.length samples in
+  Printf.printf "A+B N=%d\n%!" n;
+  Percentiles_strict.dump "A+B" samples;
+
+  if n >= 100_000 then begin
+    let idx = idx_q n 0.999 in
+    let p999 = (Array.copy samples |> fun a -> Array.sort compare a; a.(idx)) in
+    if p999 > Config.ab_p999_target_ms then begin
+      Printf.eprintf "[ab] FAIL: P99.9 = %.3f ms > %.3f ms target\n%!" p999 Config.ab_p999_target_ms;
+      exit 3
+    end else
+      Printf.printf "[ab] PASS: P99.9 = %.3f ms ≤ %.3f ms\n%!" p999 Config.ab_p999_target_ms
+  end
+  else
+    Printf.printf "[ab] NOTE: N<100k, skipped strict P99.9 gate\n%!"