# REAL VALIDATOR TESTING - Complete Build System
# Extracts Coq validators and tests against enterprise corpus

.PHONY: all extract compile test clean verify

# Compiler settings
COQC = coqc
OCAMLC = ocamlc
OCAMLOPT = ocamlopt

# Directories
SRC_DIR = src
EXTRACTION_DIR = src/extraction
TOOLS_DIR = tools
BUILD_DIR = _build
CORPUS_DIR = corpus/papers
VERIFICATION_DIR = verification_queue

# Coq source files with correct paths
COQ_SOURCES = \
	$(SRC_DIR)/core/lexer/LatexCatcodes.v \
	$(SRC_DIR)/core/lexer/LatexLexer.v \
	$(SRC_DIR)/core/expander/ExpanderTypes.v \
	$(SRC_DIR)/core/expander/MacroCatalog.v \
	$(SRC_DIR)/core/expander/ExpanderAlgorithm.v \
	$(SRC_DIR)/rules/phase1_5/PostExpansionRules.v \
	$(SRC_DIR)/rules/phase1_5/RealValidators.v \
	$(EXTRACTION_DIR)/ValidatorExtraction.v

# Extracted OCaml files
EXTRACTED_FILES = \
	extracted_validators.ml \
	latex_processor.ml \
	validator_runner.ml \
	performance_tools.ml

# Build targets
all: extract compile test

# Step 1: Compile Coq sources and extract to OCaml
extract: $(BUILD_DIR)/extraction_complete

$(BUILD_DIR)/extraction_complete: $(COQ_SOURCES)
	@echo "üîß EXTRACTING COQ VALIDATORS TO OCAML..."
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(VERIFICATION_DIR)
	
	# Compile Coq sources with proper dependencies and module paths
	$(COQC) -R $(SRC_DIR) src \
		$(SRC_DIR)/core/lexer/LatexCatcodes.v
	$(COQC) -R $(SRC_DIR) src \
		$(SRC_DIR)/core/lexer/LatexLexer.v
	$(COQC) -R $(SRC_DIR) src \
		$(SRC_DIR)/core/expander/ExpanderTypes.v
	$(COQC) -R $(SRC_DIR) src \
		$(SRC_DIR)/core/expander/MacroCatalog.v
	$(COQC) -R $(SRC_DIR) src \
		$(SRC_DIR)/core/expander/ExpanderAlgorithm.v
	$(COQC) -R $(SRC_DIR) src \
		$(SRC_DIR)/rules/phase1_5/PostExpansionRules.v
	$(COQC) -R $(SRC_DIR) src \
		$(SRC_DIR)/rules/phase1_5/RealValidators.v
	
	# Extract to OCaml
	$(COQC) -R $(SRC_DIR) src \
		$(EXTRACTION_DIR)/ValidatorExtraction.v
	
	# Move extracted files to build directory
	@for file in $(EXTRACTED_FILES); do \
		if [ -f $$file ]; then \
			mv $$file $(BUILD_DIR)/; \
			echo "   ‚úÖ Extracted $$file"; \
		fi; \
	done
	
	@touch $(BUILD_DIR)/extraction_complete
	@echo "üéØ COQ EXTRACTION COMPLETE: Real validators ready for testing"

# Step 2: Compile OCaml testing infrastructure  
compile: $(BUILD_DIR)/real_corpus_tester

$(BUILD_DIR)/real_corpus_tester: $(BUILD_DIR)/extraction_complete $(TOOLS_DIR)/real_corpus_tester.ml
	@echo "üîß COMPILING REAL CORPUS TESTER..."
	
	# Compile extracted modules
	cd $(BUILD_DIR) && $(OCAMLC) -c extracted_validators.ml
	cd $(BUILD_DIR) && $(OCAMLC) -c latex_processor.ml  
	cd $(BUILD_DIR) && $(OCAMLC) -c validator_runner.ml
	cd $(BUILD_DIR) && $(OCAMLC) -c performance_tools.ml
	
	# Compile main tester
	$(OCAMLC) -I $(BUILD_DIR) -o $(BUILD_DIR)/real_corpus_tester \
		unix.cma \
		$(BUILD_DIR)/extracted_validators.cmo \
		$(BUILD_DIR)/latex_processor.cmo \
		$(BUILD_DIR)/validator_runner.cmo \
		$(BUILD_DIR)/performance_tools.cmo \
		$(TOOLS_DIR)/real_corpus_tester.ml
	
	@echo "‚úÖ COMPILATION COMPLETE: Ready for authentic corpus testing"

# Step 3: Run REAL validator testing against corpus
test: $(BUILD_DIR)/real_corpus_tester
	@echo "üî• LAUNCHING REAL VALIDATOR CORPUS TESTING..."
	@echo "============================================="
	@echo ""
	
	# Check corpus exists
	@if [ ! -d "$(CORPUS_DIR)" ]; then \
		echo "‚ùå ERROR: Corpus directory $(CORPUS_DIR) not found"; \
		echo "   Please ensure enterprise corpus is available"; \
		exit 1; \
	fi
	
	# Run authentic testing
	cd $(BUILD_DIR) && ./real_corpus_tester
	
	@echo ""
	@echo "üéØ REAL TESTING COMPLETE!"
	@echo "üìÅ Issues saved in $(VERIFICATION_DIR)/ for manual verification"

# Step 4: Manual verification of detected issues
verify:
	@echo "üîç MANUAL VERIFICATION OF DETECTED ISSUES"
	@echo "=========================================="
	@echo ""
	
	@if [ ! -d "$(VERIFICATION_DIR)" ]; then \
		echo "‚ùå No issues found for verification"; \
		exit 1; \
	fi
	
	@issue_files=$$(find $(VERIFICATION_DIR) -name "*.issues" | wc -l); \
	echo "üìä Found $$issue_files files with issues to verify"; \
	echo ""; \
	echo "üîç VERIFICATION PROCESS:"; \
	echo "   1. Review each .issues file in $(VERIFICATION_DIR)/"; \
	echo "   2. Manually check corresponding LaTeX files"; \
	echo "   3. Classify as true positive or false positive"; \
	echo "   4. Update ground truth database"; \
	echo ""; \
	echo "üìù Sample issues to verify:"; \
	@find $(VERIFICATION_DIR) -name "*.issues" | head -5 | while read file; do \
		echo "   üìÑ $$file:"; \
		head -3 "$$file" | sed 's/^/      /'; \
		echo ""; \
	done

# Performance benchmarking
benchmark: $(BUILD_DIR)/real_corpus_tester
	@echo "‚ö° PERFORMANCE BENCHMARKING: Real Semantic Analysis"
	@echo "=================================================="
	
	# Test with increasing corpus sizes
	@for size in 100 500 1000 5000; do \
		echo ""; \
		echo "üß™ Testing $$size files..."; \
		echo "SAMPLE_SIZE=$$size" > $(BUILD_DIR)/benchmark_config; \
		cd $(BUILD_DIR) && timeout 300 ./real_corpus_tester || echo "Timeout at $$size files"; \
	done

# Accuracy analysis
accuracy: verify
	@echo "üìä ACCURACY ANALYSIS: False Positive/Negative Rate"
	@echo "================================================="
	
	# This would analyze manual verification results
	@if [ -f "$(VERIFICATION_DIR)/ground_truth.json" ]; then \
		python3 $(TOOLS_DIR)/analyze_accuracy.py $(VERIFICATION_DIR)/ground_truth.json; \
	else \
		echo "‚ùå Ground truth file not found. Complete manual verification first."; \
	fi

# Clean build artifacts
clean:
	@echo "üßπ CLEANING BUILD ARTIFACTS..."
	rm -rf $(BUILD_DIR)
	rm -f $(SRC_DIR)/**/*.vo $(SRC_DIR)/**/*.vok $(SRC_DIR)/**/*.vos
	rm -f $(SRC_DIR)/**/*.glob
	rm -rf $(VERIFICATION_DIR)
	@echo "‚úÖ CLEAN COMPLETE"

# Help
help:
	@echo "REAL VALIDATOR TESTING SYSTEM"
	@echo "=============================="
	@echo ""
	@echo "Targets:"
	@echo "  extract   - Extract Coq validators to OCaml executables"
	@echo "  compile   - Compile OCaml testing infrastructure"  
	@echo "  test      - Run REAL validators against enterprise corpus"
	@echo "  verify    - Manual verification of detected issues"
	@echo "  benchmark - Performance testing with varying corpus sizes"
	@echo "  accuracy  - Analyze false positive/negative rates"
	@echo "  clean     - Remove all build artifacts"
	@echo "  all       - Extract, compile, and test (full pipeline)"
	@echo ""
	@echo "üéØ This system tests our ACTUAL Coq validators, not toy implementations!"

# Status check
status:
	@echo "REAL VALIDATOR TESTING STATUS"
	@echo "============================"
	@echo ""
	@echo "üîß Build Status:"
	@if [ -f "$(BUILD_DIR)/extraction_complete" ]; then \
		echo "   ‚úÖ Coq extraction: COMPLETE"; \
	else \
		echo "   ‚ùå Coq extraction: PENDING"; \
	fi
	@if [ -f "$(BUILD_DIR)/real_corpus_tester" ]; then \
		echo "   ‚úÖ OCaml compilation: COMPLETE"; \
	else \
		echo "   ‚ùå OCaml compilation: PENDING"; \
	fi
	@echo ""
	@echo "üìä Corpus Status:"
	@if [ -d "$(CORPUS_DIR)" ]; then \
		file_count=$$(find $(CORPUS_DIR) -name "*.tex" | wc -l); \
		echo "   ‚úÖ Enterprise corpus: $$file_count LaTeX files"; \
	else \
		echo "   ‚ùå Enterprise corpus: NOT FOUND"; \
	fi
	@echo ""
	@echo "üîç Verification Status:"
	@if [ -d "$(VERIFICATION_DIR)" ]; then \
		issue_files=$$(find $(VERIFICATION_DIR) -name "*.issues" | wc -l); \
		echo "   üìä Issues for verification: $$issue_files files"; \
	else \
		echo "   üìä Issues for verification: 0 files"; \
	fi