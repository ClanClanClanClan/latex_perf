#!/usr/bin/env python3
"""
LaTeX Perfectionist v24 - Test Corpus Generator

Generates comprehensive test corpus targeting our 51 implemented V1½ rules.
Creates systematic test cases for validation rule coverage.
"""

import os
import json
from pathlib import Path

# Test patterns targeting specific rule categories
TEST_PATTERNS = {
    "deprecated_commands": [
        r"\bf{bold text}",
        r"\it{italic text}", 
        r"\rm{roman text}",
        r"\sc{small caps}",
        r"\tt{typewriter}",
        r"\sl{slanted}",
        r"\em{emphasis}"
    ],
    
    "obsolete_math": [
        r"$$x^2 + y^2 = z^2$$",
        r"$$\sum_{i=1}^n a_i$$",
        r"$$\int_0^\infty e^{-x} dx$$"
    ],
    
    "spacing_issues": [
        r"word1word2",  # Missing space
        r"word1  word2",  # Double space
        r"word1   word2",  # Triple space
        r"\LaTeX is great",  # Good
        r"\LaTeX{}is great"  # Missing space after command
    ],
    
    "typography_issues": [
        r'``quoted text"',  # Mixed quotes
        r'"quoted text"',   # Straight quotes
        r"`quoted text'",   # Proper quotes
        r"word---word",     # Em dash
        r"word--word",      # En dash
        r"word-word"        # Hyphen
    ],
    
    "greek_letters": [
        r"\alpha + \beta = \gamma",
        r"\Alpha + \Beta = \Gamma", 
        r"\delta, \epsilon, \zeta",
        r"\theta, \lambda, \mu, \nu",
        r"\pi, \rho, \sigma, \tau",
        r"\phi, \chi, \psi, \omega"
    ],
    
    "structural_commands": [
        r"\section{Introduction}",
        r"\subsection{Background}",
        r"\subsubsection{Details}",
        r"\paragraph{Note}",
        r"\subparagraph{Subnote}"
    ]
}

def generate_test_file(name, content, category="standard"):
    """Generate a complete LaTeX test file."""
    template = f"""% Test case: {name}
% Category: {category}
% Generated by LaTeX Perfectionist v24 corpus generator

\\documentclass{{article}}
\\usepackage{{amsmath}}
\\usepackage{{amssymb}}

\\begin{{document}}

\\title{{Test Case: {name}}}
\\author{{LaTeX Perfectionist v24}}
\\date{{\\today}}
\\maketitle

{content}

\\end{{document}}
"""
    return template

def create_minimal_tests():
    """Create minimal test cases (5-10 files)."""
    tests = [
        ("minimal_clean", "Hello, world!", "minimal"),
        ("minimal_math", "The equation $x = y$ is simple.", "minimal"),
        ("minimal_section", "\\section{Test}\nThis is a test section.", "minimal"),
        ("minimal_greek", "Greek letter: $\\alpha$", "minimal"),
        ("minimal_deprecated", "This uses \\bf{bold} text.", "minimal")
    ]
    
    for name, content, category in tests:
        file_content = generate_test_file(name, content, category)
        filepath = f"corpus/{category}/{name}.tex"
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w') as f:
            f.write(file_content)
        print(f"Generated: {filepath}")

def create_standard_tests():
    """Create standard test cases (20-30 files)."""
    tests = []
    
    # Create tests for each pattern category
    for category, patterns in TEST_PATTERNS.items():
        for i, pattern in enumerate(patterns):
            name = f"{category}_{i+1:02d}"
            content = f"Test pattern: {pattern}\n\nThis tests {category.replace('_', ' ')} validation."
            tests.append((name, content, "standard"))
    
    # Additional comprehensive tests
    comprehensive_tests = [
        ("mixed_deprecated", "\\bf{Bold} and \\it{italic} and \\sc{small caps}.", "standard"),
        ("math_comprehensive", "\\begin{equation}\n\\alpha + \\beta = \\int_0^\\infty f(x) dx\n\\end{equation}", "standard"),
        ("structure_comprehensive", "\\section{Intro}\n\\subsection{Details}\n\\paragraph{Note}", "standard"),
        ("typography_comprehensive", "``Proper quotes'' and word---dash and \\LaTeX{} spacing.", "standard")
    ]
    
    tests.extend(comprehensive_tests)
    
    for name, content, category in tests:
        file_content = generate_test_file(name, content, category)
        filepath = f"corpus/{category}/{name}.tex"
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w') as f:
            f.write(file_content)
        print(f"Generated: {filepath}")

def create_stress_tests():
    """Create stress test cases (large, complex documents)."""
    
    # Large document with many patterns
    large_content = """
\\section{Introduction}
This is a large document with many validation targets.

\\subsection{Deprecated Commands}
Here we test \\bf{bold}, \\it{italic}, \\rm{roman}, \\sc{small caps}.

\\subsection{Math Content}
$$x^2 + y^2 = z^2$$

\\begin{equation}
\\sum_{i=1}^n \\alpha_i = \\int_0^\\infty \\beta(x) dx
\\end{equation}

Greek letters: \\alpha, \\beta, \\gamma, \\delta, \\epsilon, \\zeta, \\eta, \\theta.

\\subsection{Typography}
``Quoted text'' and word---dash and proper \\LaTeX{} spacing.

\\subsection{Structure}
\\paragraph{Details} This paragraph contains details.
\\subparagraph{More Details} Even more details here.

\\subsection{Repeated Patterns}
""" + "\\bf{repeated} " * 50 + """

\\section{Conclusion}
This document contains many validation targets for comprehensive testing.
"""
    
    stress_tests = [
        ("large_comprehensive", large_content, "stress"),
        ("repeated_deprecated", "\\bf{bold} " * 100, "stress"), 
        ("many_greek_letters", " ".join([f"\\{letter}" for letter in 
            ["alpha", "beta", "gamma", "delta", "epsilon"] * 20]), "stress"),
        ("deep_structure", "\\section{S1}\n\\subsection{S1.1}\n\\subsubsection{S1.1.1}\n" * 10, "stress")
    ]
    
    for name, content, category in stress_tests:
        file_content = generate_test_file(name, content, category)
        filepath = f"corpus/{category}/{name}.tex"
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w') as f:
            f.write(file_content)
        print(f"Generated: {filepath}")

def create_corpus_manifest():
    """Create a manifest of all test files with expected results."""
    manifest = {
        "version": "v24-R3",
        "generated": "2025-07-23",
        "total_files": 0,
        "categories": {
            "minimal": {"count": 0, "description": "Simple test cases"},
            "standard": {"count": 0, "description": "Standard validation tests"},
            "stress": {"count": 0, "description": "Large, complex documents"}
        },
        "expected_coverage": {
            "deprecated_commands": 15,
            "obsolete_math": 8, 
            "spacing_issues": 12,
            "typography_issues": 10,
            "greek_letters": 25,
            "structural_commands": 8
        }
    }
    
    # Count actual files
    for category in ["minimal", "standard", "stress"]:
        corpus_dir = Path(f"corpus/{category}")
        if corpus_dir.exists():
            tex_files = list(corpus_dir.glob("*.tex"))
            manifest["categories"][category]["count"] = len(tex_files)
            manifest["total_files"] += len(tex_files)
    
    with open("corpus/corpus_manifest.json", "w") as f:
        json.dump(manifest, f, indent=2)
    
    print(f"Generated corpus manifest: {manifest['total_files']} files total")

def main():
    """Generate complete test corpus."""
    print("=== LaTeX Perfectionist v24 - Test Corpus Generator ===")
    print("Generating comprehensive test corpus...")
    
    create_minimal_tests()
    print(f"✅ Minimal tests generated")
    
    create_standard_tests() 
    print(f"✅ Standard tests generated")
    
    create_stress_tests()
    print(f"✅ Stress tests generated")
    
    create_corpus_manifest()
    print(f"✅ Corpus manifest generated")
    
    print("\n=== Corpus Generation Complete ===")
    print("Ready for CI/CD validation testing!")

if __name__ == "__main__":
    main()